# -*- coding: utf-8 -*-
"""ALBUM_Feature_Extract.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12avgtvlfCzdHt9EzlXv7a4BLbOqB6Xj8
"""
import os
import keras
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing import image
from keras.applications.imagenet_utils import decode_predictions, preprocess_input
from keras.models import Model
from PIL import Image

import random
from scipy.spatial import distance
from sklearn.decomposition import PCA

model = keras.applications.VGG16(weights='imagenet', include_top=True)

model.summary()

def load_image(path):
  img = image.load_img(path, target_size=model.input_shape[1:3])
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  return img, x

img, x = load_image("images/0.jpeg")
print("shape of x: ", x.shape)
print("data type: ", x.dtype)
plt.imshow(img)

predictions = model.predict(x)
for _, pred, prob in decode_predictions(predictions)[0]:
  print("predicted %s with a probabilty of %0.3f" % (pred, prob))

feat_extractor = Model(inputs=model.input, outputs=model.get_layer("fc2").output)
feat_extractor.summary()

img,x = load_image("images/0.jpeg")
feat = feat_extractor.predict(x)

plt.figure(figsize=(16,4))
plt.plot(feat[0])

path = "images"
images = []

for img in sorted(os.listdir(path)):
  img_path = os.path.join(path,img)
  images.append(img_path)

print(images)

features = []

for img in images:
  img,x = load_image(img)
  feat = feat_extractor.predict(x)[0]
  features.append(feat)

features = np.array(features)
pca = PCA(n_components=300)
pca.fit(features)

pca_features = pca.transform(features)

def select_image(img_bank):

  query_image_idx = int(len(img_bank) * random.random())

  img = image.load_img(img_bank[query_image_idx])
  plt.imshow(img)

  return query_image_idx

def find_similar(idx, img_bank):

  similar_idx = [distance.cosine(pca_features[idx], feat) for feat in pca_features]
  idx_closest = sorted(range(len(similar_idx)), key=lambda k: similar_idx[k])[1:6]

  thumbs = []
  for i in idx_closest:
    img = image.load_img(img_bank[i])
    img.resize((int(img.width * 100 / img.height), 100))
    thumbs.append(img)

  concat_image = np.concatenate([np.asarray(t) for t in thumbs], axis=1)


  plt.figure(figsize = (16,12))
  plt.imshow(concat_image)

query = select_image(images)
find_similar(query, images)
